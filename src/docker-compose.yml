version: '3'
services:
  prometheus:
    image: "prom/prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network
    depends_on:
      - service_a
      - service_b

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - jaeger
      - service_a
      - service_b
    networks:
      - app_network

  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.10.2'
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - app_network

  jaeger:
    image: 'jaegertracing/all-in-one:latest'
    ports:
      # - '6831:6831/udp'
      # - '16686:16686'
      # - '5775:5775/udp'
      # - '6832:6832/udp'
      # - '5778:5778'
      # - '14268:14268'
      # - '14250:14250'
      # - '9411:9411'
      - "6831:6831/udp"
      - "16686:16686"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_PORT=14268
      - ES_SERVER_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - app_network

  rabbitmq:
    # image: 'rabbitmq:3-management'
    image: "rabbitmq:3-management-alpine"
    container_name: 'rabbitmq'
    ports:
      - '5672:5672'
      - '15672:15672'
    # volumes:
    #   - 'rabbitmq_data:/var/lib/rabbitmq'
    #   - 'rabbitmq_log:/var/log/rabbitmq'
    environment:
      - RABBITMQ_DEFAULT_USER=auuntoo
      - RABBITMQ_DEFAULT_PASS=auuntoo
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    # restart: always
    depends_on:
      - jaeger
      - postgres
      - redis
      - mongo
    networks:
      - app_network

  postgres:
    image: postgres:14.1-alpine
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=auuntoo
      - POSTGRES_PASSWORD=auuntoo
      - POSTGRES_DB=otel_practice
    ports:
      - '5432:5432'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - jaeger
    networks:
      - app_network
    
  adminer:
    image: adminer:latest
    restart: always
    depends_on:
      - postgres
    ports:
      - 4000:8080
    networks:
      - app_network

  redis:
    image: redis
    container_name: redis
    ports:
      - '6379:6379'
    depends_on:
      - jaeger
    networks:
      - app_network
  mongo:
    image: mongo
    restart: always
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: auuntoo
      MONGO_INITDB_ROOT_PASSWORD: auuntoo
    ports:
      - '27017:27017'
    # volumes:
    #   - ./workspace:/workspace
    #   - type: volume
    #     source: mongodb_data_volume
    #     target: /data/db
    depends_on:
      - jaeger
    networks:
      - app_network

  service_a:
    # build:
    #   context: ./service-a
    image: ashraftheminhaj/service-a:v3
    ports:
      - 5001:5001
    depends_on:
      rabbitmq:
        condition: service_healthy
      # service_b:
      #   condition: service_healthy
    networks:
      - app_network

  service_b:
    # build:
    #   context: ./service-b
    image: ashraftheminhaj/service-b:v3
    ports:
      - 5002:5002
    depends_on:
      rabbitmq:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://localhost:5002/health"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

# volumes:
#   rabbitmq_data:
#     driver: local
#   rabbitmq_log:
#     driver: local
#   db:
#     driver: local
#   mongodb_data_volume:
